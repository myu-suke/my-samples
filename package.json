{
  "name": "my-samples",
  "version": "1.0.0",
  "description": "TypeScript によるデザインパターン実装リポジトリこのリポジトリは、TypeScript を用いて主要なデザインパターンを実装し、設計力、抽象化能力、そして TypeScript の型安全性を活かした可読性の高いコードを示すためのポートフォリオです。各デザインパターンは独立したディレクトリに配置されており、それぞれが特定の課題を解決するための設計を示しています。✨ アピールポイント抽象化能力: interface や abstract class を用いて、具体的な実装からロジックを分離し、柔軟で拡張性の高い設計を行っています。型安全性: TypeScript の強力な型システムを最大限に活用し、コンパイル時にエラーを検出し、安全で堅牢なコードを実現しています。可読性と保守性: 各パターンがどのような問題を解決するのかが明確であり、意図が伝わりやすいコードを心がけています。適切な命名と詳細なコメントにより、保守性を高めています。📂 ディレクトリ構成 typescript-design-patterns/ ├── README.md ├── factory/ │ └── index.ts ├── strategy/ │ └── index.ts ├── observer/ │ └── index.ts ├── decorator/ │ └── index.ts ├── command/ │ └── index.ts ├── singleton/ │ └── index.ts └── composite/ └── index.ts 🚀 実行方法各ディレクトリのコードは、ts-node を使って直接実行できます。# ts-node をインストール npm install -g ts-node",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "typescript": "^4.9.5",
    "@testing-library/dom": "^10.4.1",
    "@testing-library/jest-dom": "^6.6.4",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^13.5.0",
    "@types/jest": "^27.5.2",
    "@types/node": "^16.18.126",
    "@types/react": "^19.1.9",
    "@types/react-dom": "^19.1.7",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
    "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
